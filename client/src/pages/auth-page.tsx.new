import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useAuth } from "@/hooks/use-auth";
import { useEffect, useState } from "react";
import { useLocation } from "wouter";
import { insertUserSchema } from "@shared/schema";
import { Loader2, GraduationCap, Users } from "lucide-react";
import { cn } from "@/lib/utils";

// Import custom auth components
import { AuthNavbar } from "@/components/auth/auth-navbar";
import { AuthHero } from "@/components/auth/auth-hero";
import { AuthFeatures } from "@/components/auth/auth-features";
import { AuthHowItWorks } from "@/components/auth/auth-how-it-works";
import { AuthTestimonials } from "@/components/auth/auth-testimonials";
import { AuthFooter } from "@/components/auth/auth-footer";

const loginSchema = z.object({
  username: z.string().min(3, "Username must be at least 3 characters"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

const registerSchema = insertUserSchema
  .pick({
    username: true,
    password: true,
    email: true,
    firstName: true,
    lastName: true,
    role: true,
  })
  .extend({
    password: z.string().min(6, "Password must be at least 6 characters"),
    confirmPassword: z.string(),
    email: z.string().email("Invalid email address"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

export default function AuthPage() {
  const { user, loginMutation, registerMutation } = useAuth();
  const [, navigate] = useLocation();
  const [formState, setFormState] = useState<"idle" | "error" | "success">("idle");
  const [activeTab, setActiveTab] = useState<"login" | "register">("login");

  // Redirect if user is already logged in
  useEffect(() => {
    if (user) {
      navigate("/");
    }
  }, [user, navigate]);

  const loginForm = useForm<z.infer<typeof loginSchema>>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  const registerForm = useForm<z.infer<typeof registerSchema>>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      password: "",
      confirmPassword: "",
      email: "",
      firstName: "",
      lastName: "",
      role: "mentee",
    },
  });

  function onLoginSubmit(values: z.infer<typeof loginSchema>) {
    loginMutation.mutate(values, {
      onError: () => {
        setFormState("error");
        setTimeout(() => setFormState("idle"), 600);
      }
    });
  }

  function onRegisterSubmit(values: z.infer<typeof registerSchema>) {
    const { confirmPassword, ...data } = values;
    registerMutation.mutate(data, {
      onError: () => {
        setFormState("error");
        setTimeout(() => setFormState("idle"), 600);
      }
    });
  }

  return (
    <div className="flex flex-col min-h-screen bg-white dark:bg-gray-900">
      {/* Navigation Bar */}
      <AuthNavbar activeTab={activeTab} setActiveTab={setActiveTab} />
      
      {/* Hero Section */}
      <AuthHero setActiveTab={setActiveTab} />
      
      {/* Main Content - Auth Forms and Value Proposition */}
      <div className="flex flex-col md:flex-row py-12 px-4 max-w-7xl mx-auto">
        {/* Left Column - Value Proposition */}
        <div className="md:w-1/2 mb-8 md:mb-0 md:pr-8">
          <div className="mb-12">
            <h2 className="text-3xl font-bold mb-6">
              <span className="text-gray-800 dark:text-white">Share Skills, </span>
              <span className="text-primary dark:text-primary-light">Build Connections</span>
            </h2>
            <p className="text-gray-700 dark:text-gray-300 mb-6">
              Connect with professionals to share knowledge, reduce learning curves, and strengthen your career path.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 mb-8">
              <Button 
                variant="default" 
                size="lg" 
                className="sm:w-auto"
                onClick={() => setActiveTab("register")}  
              >
                Find a Mentor
              </Button>
              <Button 
                variant="outline" 
                size="lg" 
                className="sm:w-auto"
                onClick={() => setActiveTab("register")}  
              >
                Become a Mentor
              </Button>
            </div>
          </div>
          
          <div className="hidden md:block">
            <img 
              src="https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80" 
              alt="Mentoring session" 
              className="rounded-lg shadow-lg w-full h-auto max-h-96 object-cover"
            />
          </div>
        </div>

        {/* Right Column - Auth Forms */}
        <div className="md:w-1/2">
          <Card className="w-full shadow-lg dark:bg-gray-800/90">
            <CardHeader className="space-y-1">
              <CardTitle className="text-2xl font-bold">
                {activeTab === "login" ? "Log in to your account" : "Create an account"}
              </CardTitle>
              <CardDescription>
                {activeTab === "login" ? "Enter your credentials to access your account" : "Fill in the information to get started"}
              </CardDescription>
            </CardHeader>

            <CardContent>
              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as "login" | "register")} className="w-full">
                <TabsList className="relative grid w-full grid-cols-2 mb-6 p-1 h-12 bg-slate-100 dark:bg-slate-700/50">
                  <TabsTrigger 
                    value="login" 
                    className="data-[state=active]:shadow-md transition-all duration-250 data-[state=active]:text-primary-foreground data-[state=active]:bg-primary z-10 font-montserrat"
                  >
                    Login
                  </TabsTrigger>
                  <TabsTrigger 
                    value="register" 
                    className="data-[state=active]:shadow-md transition-all duration-250 data-[state=active]:text-primary-foreground data-[state=active]:bg-primary z-10 font-montserrat"
                  >
                    Register
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="login" className="animate-in fade-in-50 duration-250 data-[state=inactive]:animate-out data-[state=inactive]:fade-out-0">
                  <Form {...loginForm}>
                    <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
                      <FormField
                        control={loginForm.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem className="relative">
                            <FormLabel className={cn(
                              "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                              "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                            )}>
                              Username
                            </FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="Enter your username" 
                                {...field} 
                                className={cn(
                                  "border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30",
                                  "transition-all duration-300 font-montserrat",
                                  formState === "error" && "animate-shake border-red-500 dark:border-red-500"
                                )}
                              />
                            </FormControl>
                            <FormMessage className="text-xs" />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={loginForm.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem className="relative">
                            <FormLabel className={cn(
                              "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                              "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                            )}>
                              Password
                            </FormLabel>
                            <FormControl>
                              <Input 
                                type="password" 
                                placeholder="Enter your password" 
                                {...field} 
                                className={cn(
                                  "border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30",
                                  "transition-all duration-300 font-montserrat",
                                  formState === "error" && "animate-shake border-red-500 dark:border-red-500"
                                )}
                              />
                            </FormControl>
                            <FormMessage className="text-xs" />
                          </FormItem>
                        )}
                      />
                      <Button 
                        type="submit" 
                        className={cn(
                          "w-full relative overflow-hidden font-montserrat transition-all",
                          loginMutation.isPending ? "text-transparent" : ""
                        )}
                        disabled={loginMutation.isPending}
                      >
                        <span className={loginMutation.isPending ? "opacity-0" : "opacity-100"}>
                          Sign In
                        </span>
                        {loginMutation.isPending && (
                          <div className="absolute inset-0 flex items-center justify-center">
                            <Loader2 className="h-5 w-5 animate-spin text-white" />
                          </div>
                        )}
                      </Button>
                    </form>
                  </Form>
                </TabsContent>

                <TabsContent value="register" className="animate-in fade-in-50 duration-250 data-[state=inactive]:animate-out data-[state=inactive]:fade-out-0">
                  <Form {...registerForm}>
                    <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <FormField
                          control={registerForm.control}
                          name="firstName"
                          render={({ field }) => (
                            <FormItem className="relative">
                              <FormLabel className={cn(
                                "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                                "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                              )}>
                                First Name
                              </FormLabel>
                              <FormControl>
                                <Input 
                                  placeholder="John" 
                                  {...field} 
                                  className="border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30 transition-all duration-300 font-montserrat"
                                />
                              </FormControl>
                              <FormMessage className="text-xs" />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="lastName"
                          render={({ field }) => (
                            <FormItem className="relative">
                              <FormLabel className={cn(
                                "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                                "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                              )}>
                                Last Name
                              </FormLabel>
                              <FormControl>
                                <Input 
                                  placeholder="Doe" 
                                  {...field} 
                                  className="border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30 transition-all duration-300 font-montserrat"
                                />
                              </FormControl>
                              <FormMessage className="text-xs" />
                            </FormItem>
                          )}
                        />
                      </div>

                      <FormField
                        control={registerForm.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem className="relative">
                            <FormLabel className={cn(
                              "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                              "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                            )}>
                              Email
                            </FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="john.doe@example.com" 
                                {...field} 
                                className="border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30 transition-all duration-300 font-montserrat"
                              />
                            </FormControl>
                            <FormMessage className="text-xs" />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={registerForm.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem className="relative">
                            <FormLabel className={cn(
                              "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                              "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                            )}>
                              Username
                            </FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="johndoe" 
                                {...field} 
                                className="border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30 transition-all duration-300 font-montserrat"
                              />
                            </FormControl>
                            <FormMessage className="text-xs" />
                          </FormItem>
                        )}
                      />

                      <div className="grid grid-cols-2 gap-4">
                        <FormField
                          control={registerForm.control}
                          name="password"
                          render={({ field }) => (
                            <FormItem className="relative">
                              <FormLabel className={cn(
                                "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                                "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                              )}>
                                Password
                              </FormLabel>
                              <FormControl>
                                <Input 
                                  type="password" 
                                  placeholder="••••••" 
                                  {...field} 
                                  className="border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30 transition-all duration-300 font-montserrat"
                                />
                              </FormControl>
                              <FormMessage className="text-xs" />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="confirmPassword"
                          render={({ field }) => (
                            <FormItem className="relative">
                              <FormLabel className={cn(
                                "absolute -top-2 left-2 px-1 text-xs font-medium transition-all",
                                "bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400",
                              )}>
                                Confirm
                              </FormLabel>
                              <FormControl>
                                <Input 
                                  type="password" 
                                  placeholder="••••••" 
                                  {...field} 
                                  className="border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-primary/30 transition-all duration-300 font-montserrat"
                                />
                              </FormControl>
                              <FormMessage className="text-xs" />
                            </FormItem>
                          )}
                        />
                      </div>

                      <FormField
                        control={registerForm.control}
                        name="role"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="font-sf-pro text-sm">I want to join as:</FormLabel>
                            <FormControl>
                              <RadioGroup
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                                className="flex gap-6"
                              >
                                <div className="flex flex-col items-center space-y-2 border border-slate-200 dark:border-slate-700 rounded-lg p-4 transition-all hover:border-primary hover:bg-slate-50 dark:hover:bg-slate-800/50">
                                  <div className="rounded-full bg-slate-100 dark:bg-slate-800 w-12 h-12 flex items-center justify-center text-neutral dark:text-neutral-200">
                                    <Users size={20} className="text-slate-500 dark:text-slate-400" />
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="mentee" id="mentee" />
                                    <label htmlFor="mentee" className="text-sm font-medium">
                                      Mentee
                                    </label>
                                  </div>
                                  <span className="text-xs text-slate-500 dark:text-slate-400">Looking for guidance</span>
                                </div>
                                <div className="flex flex-col items-center space-y-2 border border-slate-200 dark:border-slate-700 rounded-lg p-4 transition-all hover:border-primary hover:bg-slate-50 dark:hover:bg-slate-800/50">
                                  <div className="rounded-full bg-slate-100 dark:bg-slate-800 w-12 h-12 flex items-center justify-center text-neutral dark:text-neutral-200">
                                    <GraduationCap size={20} className="text-slate-500 dark:text-slate-400" />
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="mentor" id="mentor" />
                                    <label htmlFor="mentor" className="text-sm font-medium">
                                      Mentor
                                    </label>
                                  </div>
                                  <span className="text-xs text-slate-500 dark:text-slate-400">Offering expertise</span>
                                </div>
                              </RadioGroup>
                            </FormControl>
                            <FormMessage className="text-xs" />
                          </FormItem>
                        )}
                      />

                      <Button 
                        type="submit" 
                        className={cn(
                          "w-full relative overflow-hidden font-montserrat transition-all",
                          registerMutation.isPending ? "text-transparent" : ""
                        )}
                        disabled={registerMutation.isPending}
                      >
                        <span className={registerMutation.isPending ? "opacity-0" : "opacity-100"}>
                          Create Account
                        </span>
                        {registerMutation.isPending && (
                          <div className="absolute inset-0 flex items-center justify-center">
                            <div className="h-5 w-5 border-2 border-t-transparent border-white rounded-full animate-spin" />
                          </div>
                        )}
                      </Button>
                    </form>
                  </Form>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* Features Section */}
      <AuthFeatures />
      
      {/* How It Works Section */}
      <AuthHowItWorks />
      
      {/* Testimonials Section */}
      <AuthTestimonials />
      
      {/* Footer */}
      <AuthFooter />
    </div>
  );
}
